#!/usr/bin/env python3
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from os import urandom
import struct

import hashlib

def sign_rsa(n, e, msg):
    return pow(msg, e, n)


def hash_and_sign(n, e, msg):
    h = SHA256.new()
    h.update(msg.encode('utf-8'))

    # h = hashlib.sha256(msg.encode('utf-8'))
    #.hexdigest()
    print('hash', h.hexdigest())

    hash_msg = int(h.hexdigest(), 16)
    return sign_rsa(n, e, hash_msg)


n = 24976886498932193764839094995420526199695656178299740683959490447271732355406400036259971208272546299384460374806028862406415714295594417549379823950223900922424437471455154998957719194322206804534016217707694611043362469693035245669474560096121203461947141057595335043260446750848613615356427524391326072967021939406852399850947673491851242198539539744563326212007922022114831246349677328680439929911173258836449611100835274296350811809458038129295936148561614541969800317108421922567105863225611218061796404331104604366560658825013202549403147938802346430251725486206596086859722129187723588378357846171127465868977
e = 65537
msg = '111'
hash_msg = '69cf639dbd4f7413ec3df9fec41d981703cb67ee19defe4c1f807e5d79cdfe18'
hash_msg = int(hash_msg, 16)

print('1:', hash_and_sign(n, e, msg))

print('2:', sign_rsa(n, e, hash_msg))

